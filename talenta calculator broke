<template> 
  <table class="table">
    <tbody>
      <tr>
        <th class="text-right">
          Sub Total Main Package
        </th>
        <td
          id="bill_sub_total_main_package"
          class="text-left"
        >
          {{ form.params.sub_total_main_package | currency }}
        </td>
      </tr>

      <tr>
        <th class="text-right">
          Sub Total Additional Package
        </th>
        <td
          id="bill_sub_total_additional_package"
          class="text-left"
        >
          {{ form.params.sub_total_additional_package | currency }}
        </td>
      </tr>

      <tr>
        <th class="text-right">
          Sub Total Non-Recurring Package
        </th>
        <td
          id="bill_sub_total_non_recurring"
          class="text-left"
        >
          {{ form.params.sub_total_non_recurring | currency }}
        </td>
      </tr>
      <tr>
        <th class="text-right">
          Sub Total
        </th>
        <td
          id="bill_total_amount"
          class="text-left"
        >
          {{ totalAmount | currency }}
        </td>
      </tr>
      <!-- total discount -->
      <tr>
        <th class="text-right">
          Total Discount
        </th>
        <td
          id="bill_total_discount"
          class="text-left"
        >
          {{ totalDiscount | currency }}
        </td>
      </tr>

      <!-- additional discount -->
      <tr>
        <th class="text-right">
          <p>Additional Discount</p>
          <div
            class="d-flex align-items-center justify-content-end mb-2"
            style="width:100%;"
          >
            <b-form-input 
              v-show="isAdditionalDiscountInPercentage"
              id="bill_form_additional_discount_percentage"
              v-model="form.params.additional_discount_percentage"
              :disabled="!isEditable"
              type="number"
              name="bill_form[additional_discount_percentage]"
              size="sm"
              class="m-0"
              style="max-width: 100px;"
            />
            <div
              v-show="isAdditionalDiscountInPercentage"
              class="pl-2"
            >
              %
            </div>
          </div>

          <b-form-select
            id="bill_form_additional_discount_type"
            v-model="form.params.additional_discount_type"
            class="text-right"
            :disabled="!isEditable"
            name="bill_form[additional_discount_type]"
            dir="rtl"
            size="sm"
            style="max-width: 150px;"
          >
            <option
              v-for="additional_discount_type in form.field_options.additional_discount_types"
              :key="additional_discount_type.id" 
              class="text-right"
              :value="additional_discount_type"
            >
              {{ additional_discount_type }}
            </option>
          </b-form-select>
        </th>
        <td class="text-left">
          <b-form-input
            id="bill_form_additional_discount_amount"
            v-model="form.params.additional_discount_amount"
            :disabled="!isEditable"
            type="number" 
            name="bill_form[additional_discount_amount]"
            size="sm"
          />
        </td>
      </tr>

      <tr v-if="!isAnUpgradeForm">
        <th class="text-right">
          Total DPP
        </th>
        <td 
          id="bill_total_before_tax"
          class="text-left" 
        >
          {{ form.params.cart_before_tax_amount | currency }}
        </td>
      </tr>

      <tr v-if="isAnUpgradeForm">
        <th class="text-right">
          Total DPP New Subscription
        </th>
        <td 
          id="bill_total_dpp_new_subscription"
          class="text-left" 
        >
          {{ totalNewDpp | currency }}
        </td>
      </tr>

      <tr v-if="isAnUpgradeForm && !isUpgradeAdditional">
        <th class="text-right">
          Total DPP Old Subscription
        </th>
        <td 
          id="bill_total_dpp_old_subscription"
          class="text-left" 
        >
          {{ totalOldDpp | currency }}
        </td>
      </tr>

      <tr v-if="isAnUpgradeForm">
        <th class="text-right">
          Total DPP
          <div class="row">
            <div
              id="bill_prorate_value"
              class="col-md-5"
            >
              {{ prorateValue }}
            </div>

            <div
              id="bill_total_dpp_before_prorate"
              class="col-md-7 text-left"
            >
              {{ totalDppBeforeProrate | currency }}
            </div>
          </div>
        </th>
        <td
          id="bill_total_dpp_after_prorate"
          class="text-left"
        >
          {{ totalDppAfterProrate | currency }} 
        </td>
      </tr>
              
      <tr>
        <th class="text-right">
          VAT
        </th>
        <td
          id="bill_total_vat"
          class="text-left"
        >
          {{ totalVat | currency }}
        </td>
      </tr>                 
      <tr>
        <th class="text-right">
          Net Amount
        </th>
        <td
          id="bill_net_amount" 
          class="text-left"
        >
          <font :color="netAmountColor(isInvalidNetAmount)">
            {{ totalNetAmount | currency }}
          </font>

          <span
            v-show="isInvalidNetAmount"
            id="net_amount_alert"
          >
            &#9888;
          </span>
        </td>
      </tr>

      <tr>
        <th class="text-right">
          Use pph23 <span class="font-weight-normal text-muted">(2%)</span>
          <input
            id="bill_form_include_pph23"
            v-model="form.params.include_pph23"
            :disabled="!isEditable"
            type="checkbox"
            value="true"
            name="bill_form[include_pph23]"
            style="margin-left:20px;"
            :checked="form.params.include_pph23"
          >
        </th>
        <td
          id="bill_pph23_amount" 
          class="text-left"
        >
          ({{ form.params.pph23_amount | currency }})
        </td>
      </tr>

      <div 
        v-show="isInvalidNetAmount"
        id="cart_net_amount-invalid-feedback"
      >
        <br>
        <span>&#9888;</span>
        <font color="red">
          Net Amount is invalid
        </font>
      </div>
    </tbody>
  </table>
</template>

<script>
  // MIXINS
  import SubscriptionDateHelper from '../../mixins/subscription/date_helper.js';
  import SubscriptionCalculator from '../../mixins/subscription/calculator.js';
  // EXTERNAL PACKAGE
  import Big from 'big.js';

  export default {
    mixins:[ SubscriptionCalculator, SubscriptionDateHelper],
    props: {
      appName: {
        type: String,
        required: true,
      },

      form: {
        type: Object,
        required: true,
      },

      isEditable: {
        type: Boolean,
        required: true,
      },

      isAnUpgradeForm: {
        type: Boolean,
        required: true,
      },

      isTalentaUpgrade: {
        type: Boolean,
        required: true,
      },

      isUpgradeAdditional: {
        type: Boolean,
        required: true,
      },

      oldActiveFrom: {
        type: [String, Number],
        required: false,
        default: 0
      },

      oldMainSubscription: {
        type: Object,
        required: false,
        default: null
      }
    },
    computed: {
      additionalDiscount() {
        if (this.form.params.additional_discount_type === 'amount'){
          return this.form.params.additional_discount_amount || 0;
        }

        // When not of type additional amount, then it must be percentage type
        const percentage = this.form.params.additional_discount_percentage || 0

        return this.totalAmount * percentage / 100;
      },

      finalDpp() {
        return this.getFinalDpp(this.form.params.billing_type, this.totalDpp, this.totalDppAfterProrate);
      },

      isInvalidNetAmount() {
        return this.form.params.cart_net_amount < 1
      },

      isAdditionalDiscountInPercentage() {
        return this.form.params.additional_discount_type === 'percentage';
      },

      newProratePeriod() {
        const activeDate = new Date(this.form.params.active_from).getDate()
        const oldActiveDate = new Date(this.oldActiveFrom).getDate()

        let newPeriod = this.proratePeriod(
          this.form.params.active_from, this.form.params.end_at, this.appName
        )

        if (this.isTalentaUpgrade) {
          const countFirstMonth = activeDate < oldActiveDate ? 1 : 0;
          newPeriod = newPeriod + countFirstMonth
        }

        return newPeriod;
      },

      oldProratePeriod() {
        if (this.oldMainSubscription) {
          const oldEndAt = this.oldMainSubscription.attributes.end_at
          const oldActiveFrom = this.oldActiveFrom

          const oldPeriod = this.proratePeriod(oldActiveFrom, oldEndAt, this.appName);

          return oldPeriod
        }
        else {
          return 0;
        }
      },

      pph23Amount() {
        return this.form.params.include_pph23 ? Big(this.form.params.cart_before_tax_amount || 0).times(2/100) : Big(0);
      },

      prorateValue() {
        return this.newProratePeriod + ' / ' + this.oldProratePeriod + ' x';
      },

      subTotalAdditionalPackage() {
        return this.calculateSubTotalAdditionalPackage(this.form.params.cart_items);
      },

      subTotalMainPackage() {
        return this.calculateSubTotalMainPackage(this.form.params.cart_items);
      },

      subTotalNonRecurring() {
        return this.calculateSubTotalNonRecurring(this.form.params.cart_items);
      },

      totalAmount() {
        return this.calculateTotalAmount(this.form.params.cart_items);
      },

      totalDiscount(){
        return this.calculateTotalDiscount(this.form.params.cart_items);
      },

      totalDpp() {
        return this.calculateBeforeTaxTotal(
          this.totalAmount, 
          this.totalDiscount,
          Big(this.form.params.additional_discount_amount || 0)
        );
      },

      totalDppBeforeProrate() {
        return this.calculateDppBeforeProrate(this.totalNewDpp, this.totalOldDpp, this.subTotalNonRecurring);
      },

      totalDppAfterProrate() {
        return this.calculateDppAfterProrate(this.newProratePeriod, this.oldProratePeriod, this.totalDppBeforeProrate, this.subTotalNonRecurring);
      },

      totalNewDpp() {
        return this.calculateNewDpp(this.totalAmount, this.totalDiscount, this.form.params.additional_discount_amount)
      },

      totalOldDpp() {
        if (this.isUpgradeAdditional) { return 0; }
        if (this.oldMainSubscription !== null) { return this.oldMainSubscription.attributes.before_tax_amount; }
        else { return 0; }
      },

      totalVat() {
        return ( Math.floor(this.form.params.cart_before_tax_amount * 1/10) );
      },

      totalNetAmount() {
        return Big(this.form.params.cart_before_tax_amount || 0).plus(Big(this.totalVat || 0));
      },
    //  calculator end
    },
    watch: {
    // calculation watch
      additionalDiscount(newVal) {
        this.form.params.additional_discount_amount = newVal;
      },

      finalDpp(newVal) {
        this.form.params.cart_before_tax_amount = newVal;
      },

      'form.params.additional_discount_type': function (newVal) {
        if (newVal === 'percentage') { return; }
        if (newVal === 'amount') this.form.params.additional_discount_percentage = 0;
      },

      pph23Amount(newVal) {
        this.form.params.pph23_amount = Math.floor(newVal);
      },

      subTotalAdditionalPackage(newVal){
        this.form.params.sub_total_additional_package = newVal;
      },

      subTotalMainPackage(newVal){
        this.form.params.sub_total_main_package = newVal;
      },

      subTotalNonRecurring(newVal){
        this.form.params.sub_total_non_recurring = newVal;
      },

      totalDiscount(newVal) {
        this.form.params.cart_total_discount_amount = Big(newVal || 0);
      },

      totalAmount(newVal) {
        this.form.params.cart_total_amount = Big(newVal || 0);
      },

      totalVat(newVal) {
        this.form.params.cart_total_vat_amount = Big(newVal || 0);
      },

      totalNetAmount(newVal) {
        this.form.params.cart_net_amount = Big(newVal || 0);
      },
    // calculation watch
    },
    methods: {
      getDiscountType(selected_discount_type) {
        this.form.params.cart_items[0].discount_type = selected_discount_type;
      },
      netAmountColor(isInvalidNetAmount) {
        if (isInvalidNetAmount) return "red";
        return "black";
      }
    }
  };
</script>